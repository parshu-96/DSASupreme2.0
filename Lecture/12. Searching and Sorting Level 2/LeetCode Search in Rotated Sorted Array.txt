https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
public:

    int findPivotIndex(vector<int>& arr){
         //Find Pivot Index
    int n=arr.size();
    int s=0;
    int e=n-1;
    int mid =s+(e-s)/2;
    while(s<=e)
    {
        if(s==e)
        {
            //Single Element
            return s;
        }
        //Very Important conndition Check mid+1<n
        if(mid+1 < n && arr[mid]>arr[mid+1])
        {
            return mid;
        }
        //Very Important conndition Check mid-1> = 0
        if(mid-1> = 0 && arr[mid]<arr[mid-1])
        {
            return mid-1;
        }        
        else if(arr[s]>arr[mid])
        {
            e=mid-1;
        }
        else
        {
            s=mid+1;
        }
        mid=s+(e-s)/2;
    }
    return -1;
    }

    int binarySearch(vector<int>& nums,int s,int e, int target)
    {
        int mid=s+(e-s)/2;
        while(s<=e)
        {
            if(nums[mid]==target)
            {
                return mid;
            }
            if(target>nums[mid])
            {
                s=mid+1;
            }
            else
            {
                e=mid-1; 
            }
            mid=s+(e-s)/2;
        }
        return -1;
    }
   
    int search(vector<int>& nums, int target) {
        int pivotIndex=findPivotIndex(nums);
        int ans=-1;
        int n=nums.size();
        if(target>=nums[0]&&target<=nums[pivotIndex])
        {
            ans=binarySearch(nums,0,pivotIndex,target);
        }
        else 
        {
            ans=binarySearch(nums,pivotIndex+1,n-1,target);
        }
        return ans;
    }
};